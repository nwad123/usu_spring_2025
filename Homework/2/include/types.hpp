#pragma once

#include "fmt/base.h"
#include "fmt/ranges.h"
#include <algorithm>
#include <chrono>
#include <string_view>
#include <vector>

namespace hpc {

using fp = float;

struct Config
{
    size_t threads;
    size_t bins;
    fp min;
    fp max;
    size_t size;

    inline auto print() const -> void;
    constexpr auto operator==(/*in*/ const Config &other) const -> bool = default;
};

struct Bin
{
    std::vector<fp> maxes;
    std::vector<size_t> counts;

    inline auto report() const -> void;

    constexpr auto operator==(/*in*/ const Bin &other) const -> bool
    {
        return std::ranges::equal(maxes, other.maxes) && std::ranges::equal(counts, other.counts);
    }
};

/* `Timer` class initially generated by claude.ai */
class Timer
{
  private:
    using clock = std::chrono::high_resolution_clock;
    using time_point = clock::time_point;

    time_point start_time;

  public:
    Timer() : start_time(clock::now()) {}

    size_t elapsed_ms() const
    {
        const auto current = clock::now();
        const auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(current - start_time);
        return static_cast<size_t>(duration.count());
    }

    void reset() { start_time = clock::now(); }
};

struct Result
{
    std::string_view name;
    size_t time_ms;
    Bin bin;
    Config config;

    constexpr Result() = default;
    constexpr Result(const std::string_view name, const size_t time_ms, const Bin &&bin, const Config config)
        : name(name), time_ms(time_ms), bin(bin), config(config)
    {}

    constexpr auto operator==(/*in*/ const Result &other) const -> bool
    {
        return config == other.config && bin == other.bin;
    }
};

inline auto Config::print() const -> void
{
    fmt::println(
        "\"Config\": {{\n"
        "  \"Threads\": {},\n"
        "  \"Bins\": {},\n"
        "  \"Data range\":  [{}, {}],\n"
        "  \"Data size\":   {}\n"
        "}},",
        threads,
        bins,
        min,
        max,
        size);
}

inline auto Bin::report() const -> void
{
    fmt::println("  \"Maxes\":  {},", maxes);
    fmt::println("  \"Counts\": {}", counts);
}
}// namespace hpc

#pragma once

#include "fmt/base.h"
#include "fmt/ranges.h"
#include <chrono>
#include <vector>

namespace hpc {

using fp = float;

struct config_t
{
    size_t threads;
    size_t bins;
    fp min;
    fp max;
    size_t size;

    inline auto print() const -> void;
};

struct bin_results_t
{
    std::vector<fp> maxes;
    std::vector<size_t> counts;

    inline auto report() const -> void;
};

/* `timer` class initially generated by claude.ai */
class timer
{
  private:
    using clock = std::chrono::high_resolution_clock;
    using time_point = clock::time_point;

    time_point start_time;

  public:
    timer() : start_time(clock::now()) {}

    size_t elapsed_ms() const
    {
        const auto current = clock::now();
        const auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(current - start_time);
        return static_cast<size_t>(duration.count());
    }

    void reset() { start_time = clock::now(); }
};

inline auto config_t::print() const -> void
{
    fmt::println(
        "Number of threads: {}\n"
        "Number of bins:    {}\n"
        "Range of dataset:  {}-{}\n"
        "Size of dataset:   {}\n",
        threads,
        bins,
        min,
        max,
        size);
}

inline auto bin_results_t::report() const -> void
{
    fmt::println("Maxes:  {}", maxes);
    fmt::println("Counts: {}", counts);
}
}// namespace hpc
